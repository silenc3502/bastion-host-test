name: Just for test that send test.txt to private ec2 instance through bastion host 

on:
  push:
    branches: [ "main" ]

jobs:
  just-send:
    runs-on: ubuntu-latest
    steps:
      - name: Get Github Actions IP
        id: ip
        uses: haythem/public-ip@v1.2
          
      - name: Check to print IP
        run: |
          echo ${{ steps.ip.outputs }}
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
          
      - name: Get Parameter Value (Bastion Host PEM Key)
        id: get-bastion-pem-key
        run: |
          parameter_name="BASTION_HOST_PEM_KEY"
          parameter_value=$(aws ssm get-parameter --name $parameter_name --with-decryption --query "Parameter.Value" --output text)
          echo "::set-output name=bastion-pem-key::$parameter_value"

      - name: Get Parameter Value (Private EC2 PEM Key)
        id: get-private-ec2-pem-key
        run: |
          parameter_name="PRIVATE_EC2_PEM_KEY"
          parameter_value=$(aws ssm get-parameter --name $parameter_name --with-decryption --query "Parameter.Value" --output text)
          echo "::set-output name=private-ec2-pem-key::$parameter_value"
        
      - name: Authorize GitHub Actions IP in Bastion Host Security Group
        run: |
          aws ec2 authorize-security-group-ingress \
          --group-id ${{ secrets.BASTION_SECURITY_GROUP_ID }} \
          --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Authorize Bastion Host IP in Private EC2 Security Group
        run: |
          aws ec2 authorize-security-group-ingress \
          --group-id ${{ secrets.PRIVATE_EC2_SECURITY_GROUP_ID }} \
          --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
          
      - name: Send test.txt to private ec2
        run: |
          set -e
          set -x
          
          echo "테스트 가즈아!" > test.txt
          ls
          
          bastion_pem_key="${{ steps.get-bastion-pem-key.outputs.bastion-pem-key }}"
          private_ec2_pem_key="${{ steps.get-private-ec2-pem-key.outputs.private-ec2-pem-key }}"
          bastion_host_ip="${{ secrets.BASTION_HOST_IP }}"
          private_ec2_ip="${{ secrets.PRIVATE_EC2_IP }}"

          scp -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i "$bastion_pem_key" \
            test.txt ec2-user@"$bastion_host_ip":~/

          ssh -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -i "$bastion_pem_key" \
            -J ec2-user@"$bastion_host_ip" \
            "scp -i $private_ec2_pem_key /home/ec2-user/test.txt ec2-user@$private_ec2_ip:~/"
        continue-on-error: true
          
      - name: Revoke GitHub Actions IP in Bastion Host Security Group
        run: |
          aws ec2 revoke-security-group-ingress \
          --group-id ${{ secrets.BASTION_SECURITY_GROUP_ID }} \
          --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        continue-on-error: true
          
      - name: Revoke Bastion Host IP in Private EC2 Security Group
        run: |
          aws ec2 revoke-security-group-ingress \
          --group-id ${{ secrets.PRIVATE_EC2_SECURITY_GROUP_ID }} \
          --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
        continue-on-error: true
        
      - name: Clean up
        run: |
          rm test.txt
        continue-on-error: true
